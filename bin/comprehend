#!/usr/bin/env python

import base64
import googleapiclient.discovery
import operator
import os
import random
import re
import subprocess
import sys
import tempfile
import time

def check():
    transcript = run('something', lambda _: True)
    print('You said: “{}” (score {:.2f})'.format(
        transcript['text'], transcript['score']))

def check_file(path):
    lines = []
    with open(path) as file:
        for line in file:
            lines.append(line.strip())
    while True:
        line = random.choice(lines)
        def _callback(transcript):
            print('You said: “{}” (score {:.2f})'.format(
                transcript['text'], transcript['score']))
            return compare(line, transcript['text'])
        run('“{}”'.format(line), _callback, count=5)
        print('Good! Press Enter for one more.')
        input()

def check_line(line):
    def _callback(transcript):
        print('You said: “{}” (score {:.2f})'.format(
            transcript['text'], transcript['score']))
        return compare(line, transcript['text'])
    run('“{}”'.format(line), _callback)
    print('Good!')

def clean(line):
    return re.sub(r'[^a-z ]', '', line.strip().lower())

def compare(one, two):
    return clean(one) == clean(two)

def countdown(count):
    for i in reversed(range(count)):
        print('{}… '.format(i + 1), end='')
        sys.stdout.flush()
        time.sleep(1)
    print('Go!')

def record(name='recording'):
    with tempfile.TemporaryDirectory() as directory:
        one = os.path.join(directory, 'one.flac')
        two = os.path.join(directory, 'two.flac')
        subprocess.call(['rec', '-q', '-V0', one,
                         'rate', '44100',
                         'silence', '0', '1', '1.0', '1%'])
        subprocess.call(['sox', '-q', '-V0', one, two,
                         'remix', '1,2'])
        return open(two, 'rb').read()

def run(what, callback, count=3):
    while True:
        print('Say {} in '.format(what), end='')
        countdown(count)
        print('Recording…')
        data = record()
        print('Transcribing…')
        transcript = transcribe(data)
        if transcript is None or not callback(transcript):
            print('That was bad. Let’s do it again.')
        else:
            return transcript

def transcribe(data):
    body = {
        'config': {
            'encoding': 'FLAC',
            'sampleRate': 44100,
            'languageCode': 'sv-SE',
        },
        'audio': {
            'content': base64.b64encode(data).decode('UTF-8'),
        },
    }
    service = googleapiclient.discovery.build('speech', 'v1beta1')
    request = service.speech().syncrecognize(body=body)
    response = request.execute()
    alternatives = []
    for result in response.get('results', []):
        alternatives.extend(result['alternatives'])
    if len(alternatives) == 0:
        return None
    scores = [alternative['confidence'] for alternative in alternatives]
    index, score = max(enumerate(scores), key=operator.itemgetter(1))
    return {'text': alternatives[index]['transcript'], 'score': score}

def main(arguments):
    argument = ' '.join(arguments)
    if len(argument) == 0:
        check()
    elif os.path.exists(argument):
        check_file(argument)
    else:
        check_line(argument)

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except KeyboardInterrupt:
        print('\nBye.')
        pass
