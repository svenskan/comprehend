#!/usr/bin/env python

import base64
import googleapiclient.discovery
import operator
import os
import subprocess


class Error(Exception):
    def __init__(self, *arguments):
        super(Error, self).__init__(*arguments)


def record(name='recording'):
    one = '{}1.flac'.format(name)
    two = '{}2.flac'.format(name)
    subprocess.call(['rec', '-q', '-V0', one,
                     'rate', '44100',
                     'silence', '1', '0.1', '3%', '1', '3.0', '3%'])
    subprocess.call(['sox', '-q', '-V0', one, two,
                     'remix', '1,2'])
    data = base64.b64encode(open(two, 'rb').read())
    os.remove(one)
    os.remove(two)
    return data

def transcribe(data):
    body = {
        'config': {
            'encoding': 'FLAC',
            'sampleRate': 44100,
            'languageCode': 'sv-SE',
        },
        'audio': {
            'content': data.decode('UTF-8'),
        },
    }
    service = googleapiclient.discovery.build('speech', 'v1beta1')
    request = service.speech().syncrecognize(body=body)
    response = request.execute()
    alternatives = []
    for result in response.get('results', []):
        alternatives.extend(result['alternatives'])
    return alternatives

def main():
    print('Pronounce a phrase!')
    while True:
        data = record()
        print('Transcribing...')
        alternatives = transcribe(data)
        if len(alternatives) == 0:
            print('Try again. Pronounce the phrase!')
            continue
        break
    confidence = [alternative['confidence'] for alternative in alternatives]
    index, confidence = max(enumerate(confidence), key=operator.itemgetter(1))
    transcript = alternatives[index]['transcript']
    print('Your phrase: “{}” (confidence {}%)'.format(
        transcript, int(100 * confidence)))

if __name__ == '__main__':
    try:
        main()
    except Error as e:
        print('Error: {}.'.format(e))
